#!/usr/bin/env python3
"""
ChromaGit Desktop App
Aplica√ß√£o desktop unificada do ChromaGit com interface rica
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from pathlib import Path
import subprocess
import json
import threading
from datetime import datetime

# Adicionar diret√≥rio do projeto ao path
project_dir = Path(__file__).parent
sys.path.insert(0, str(project_dir))

class ChromaGitApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ChromaGit - Sistema de Controle de Vers√£o")
        self.root.geometry("900x700")
        
        # Configurar √≠cone se favicon existir
        favicon_path = project_dir / "favicon.ico"
        if favicon_path.exists():
            try:
                self.root.iconbitmap(str(favicon_path))
            except:
                pass  # Ignora se n√£o conseguir carregar o √≠cone
        
        self.current_dir = Path.cwd()
        self.setup_ui()
        self.refresh_status()
    
    def setup_ui(self):
        """Configura a interface do usu√°rio"""
        # Menu
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Menu Arquivo
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Arquivo", menu=file_menu)
        file_menu.add_command(label="Abrir Pasta", command=self.open_folder)
        file_menu.add_command(label="Atualizar", command=self.refresh_status)
        file_menu.add_separator()
        file_menu.add_command(label="Sair", command=self.root.quit)
        
        # Menu Reposit√≥rio
        repo_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Reposit√≥rio", menu=repo_menu)
        repo_menu.add_command(label="Inicializar", command=self.init_repo)
        repo_menu.add_command(label="Status", command=self.show_status)
        repo_menu.add_separator()
        repo_menu.add_command(label="Fazer Push", command=self.push_repo)
        
        # Menu Ajuda
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Ajuda", menu=help_menu)
        help_menu.add_command(label="Sobre", command=self.show_about)
        help_menu.add_command(label="Documenta√ß√£o", command=self.show_docs)
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # Header
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        title_label = ttk.Label(header_frame, text="üåà ChromaGit", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0)
        
        self.current_dir_label = ttk.Label(header_frame, text=f"üìÅ {self.current_dir}")
        self.current_dir_label.grid(row=1, column=0, sticky=tk.W)
        
        # Status frame
        status_frame = ttk.LabelFrame(main_frame, text="Status do Reposit√≥rio", padding="10")
        status_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        status_frame.columnconfigure(1, weight=1)
        
        self.status_text = tk.Text(status_frame, height=6, wrap=tk.WORD)
        status_scroll = ttk.Scrollbar(status_frame, orient=tk.VERTICAL, command=self.status_text.yview)
        self.status_text.configure(yscrollcommand=status_scroll.set)
        
        self.status_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        status_scroll.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Controles
        controls_frame = ttk.Frame(main_frame)
        controls_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Bot√µes principais
        ttk.Button(controls_frame, text="üèóÔ∏è Inicializar", 
                  command=self.init_repo).grid(row=0, column=0, padx=5)
        ttk.Button(controls_frame, text="‚ûï Adicionar Tudo", 
                  command=self.add_all).grid(row=0, column=1, padx=5)
        ttk.Button(controls_frame, text="üíæ Fazer Commit", 
                  command=self.commit_dialog).grid(row=0, column=2, padx=5)
        ttk.Button(controls_frame, text="üöÄ Push", 
                  command=self.push_repo).grid(row=0, column=3, padx=5)
        ttk.Button(controls_frame, text="üìä Log", 
                  command=self.show_log).grid(row=0, column=4, padx=5)
        ttk.Button(controls_frame, text="üîÑ Atualizar", 
                  command=self.refresh_status).grid(row=0, column=5, padx=5)
        
        # Campo de mensagem de commit
        commit_frame = ttk.Frame(main_frame)
        commit_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        commit_frame.columnconfigure(1, weight=1)
        
        ttk.Label(commit_frame, text="Mensagem do Commit:").grid(row=0, column=0, sticky=tk.W)
        self.commit_message = ttk.Entry(commit_frame, width=50)
        self.commit_message.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0))
        
        # Output
        output_frame = ttk.LabelFrame(main_frame, text="Sa√≠da de Comandos", padding="10")
        output_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        output_frame.columnconfigure(0, weight=1)
        output_frame.rowconfigure(0, weight=1)
        
        self.output_text = tk.Text(output_frame, wrap=tk.WORD)
        output_scroll = ttk.Scrollbar(output_frame, orient=tk.VERTICAL, command=self.output_text.yview)
        self.output_text.configure(yscrollcommand=output_scroll.set)
        
        self.output_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        output_scroll.grid(row=0, column=1, sticky=(tk.N, tk.S))
    
    def log_output(self, message, level="INFO"):
        """Adiciona mensagem ao log de sa√≠da"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {level}: {message}\n"
        
        self.output_text.insert(tk.END, formatted_message)
        self.output_text.see(tk.END)
        self.root.update()
    
    def run_chromagit_command(self, command, *args):
        """Executa um comando do ChromaGit"""
        try:
            cmd = [sys.executable, str(project_dir / "main.py"), command] + list(args)
            self.log_output(f"Executando: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, 
                                  capture_output=True, 
                                  text=True, 
                                  cwd=str(self.current_dir))
            
            if result.stdout:
                self.log_output(result.stdout.strip())
            
            if result.stderr:
                self.log_output(result.stderr.strip(), "ERROR")
            
            if result.returncode == 0:
                self.log_output("Comando executado com sucesso!", "SUCCESS")
            else:
                self.log_output(f"Comando falhou com c√≥digo {result.returncode}", "ERROR")
            
            return result.returncode == 0
            
        except Exception as e:
            self.log_output(f"Erro ao executar comando: {e}", "ERROR")
            return False
    
    def refresh_status(self):
        """Atualiza o status do reposit√≥rio"""
        self.log_output("Atualizando status...")
        
        # Verificar se √© um reposit√≥rio ChromaGit
        chromagit_dir = self.current_dir / ".chromagit"
        
        status_info = []
        
        if chromagit_dir.exists():
            status_info.append("‚úÖ Reposit√≥rio ChromaGit ativo")
            
            # Ler configura√ß√£o
            config_file = chromagit_dir / "config.json"
            if config_file.exists():
                try:
                    with open(config_file, 'r', encoding='utf-8') as f:
                        config = json.load(f)
                    status_info.append(f"üìã Projeto: {config.get('name', 'Sem nome')}")
                    status_info.append(f"üë§ Autor: {config.get('author', 'N√£o definido')}")
                except:
                    status_info.append("‚ö†Ô∏è Erro ao ler configura√ß√£o")
            
            # Verificar staging
            staging_file = chromagit_dir / "staging.json"
            if staging_file.exists():
                try:
                    with open(staging_file, 'r', encoding='utf-8') as f:
                        staging = json.load(f)
                    file_count = len(staging.get('files', []))
                    status_info.append(f"üìù Arquivos em staging: {file_count}")
                except:
                    status_info.append("üìù Arquivos em staging: 0")
            else:
                status_info.append("üìù Arquivos em staging: 0")
            
            # Verificar commits
            commits_file = chromagit_dir / "commits.json" 
            if commits_file.exists():
                try:
                    with open(commits_file, 'r', encoding='utf-8') as f:
                        commits_data = json.load(f)
                    commit_count = len(commits_data.get('commits', []))
                    status_info.append(f"üìä Total de commits: {commit_count}")
                except:
                    status_info.append("üìä Total de commits: 0")
            else:
                status_info.append("üìä Total de commits: 0")
        else:
            status_info.append("‚ùå N√£o √© um reposit√≥rio ChromaGit")
            status_info.append("üí° Use 'Inicializar' para criar um novo reposit√≥rio")
        
        # Atualizar interface
        self.status_text.delete(1.0, tk.END)
        self.status_text.insert(tk.END, "\n".join(status_info))
        
        self.current_dir_label.config(text=f"üìÅ {self.current_dir}")
    
    def open_folder(self):
        """Abre uma pasta diferente"""
        folder = filedialog.askdirectory(initialdir=str(self.current_dir))
        if folder:
            self.current_dir = Path(folder)
            os.chdir(str(self.current_dir))
            self.log_output(f"Mudado para: {self.current_dir}")
            self.refresh_status()
    
    def init_repo(self):
        """Inicializa um reposit√≥rio"""
        # Dialog para nome do projeto
        name = tk.simpledialog.askstring("Inicializar Reposit√≥rio", 
                                        "Nome do projeto:")
        if name:
            threading.Thread(
                target=lambda: self.run_chromagit_command("init", "--name", name)
            ).start()
            self.root.after(1000, self.refresh_status)
    
    def add_all(self):
        """Adiciona todos os arquivos"""
        threading.Thread(
            target=lambda: self.run_chromagit_command("add", ".")
        ).start()
        self.root.after(1000, self.refresh_status)
    
    def commit_dialog(self):
        """Dialog para fazer commit"""
        message = self.commit_message.get().strip()
        if not message:
            messagebox.showwarning("Aviso", "Por favor, insira uma mensagem de commit")
            return
        
        threading.Thread(
            target=lambda: self.run_chromagit_command("commit", "-m", message)
        ).start()
        
        # Limpar campo de mensagem
        self.commit_message.delete(0, tk.END)
        self.root.after(1000, self.refresh_status)
    
    def push_repo(self):
        """Faz push do reposit√≥rio"""
        threading.Thread(
            target=lambda: self.run_chromagit_command("push")
        ).start()
        self.root.after(1000, self.refresh_status)
    
    def show_log(self):
        """Mostra o log de commits"""
        threading.Thread(
            target=lambda: self.run_chromagit_command("log", "--limit", "10")
        ).start()
    
    def show_status(self):
        """Mostra status detalhado"""
        threading.Thread(
            target=lambda: self.run_chromagit_command("status")
        ).start()
    
    def show_about(self):
        """Mostra informa√ß√µes sobre o ChromaGit"""
        about_text = """
üåà ChromaGit Desktop v1.0.0

Sistema de Controle de Vers√£o Moderno
Desenvolvido em Python com interface rica

Caracter√≠sticas:
‚Ä¢ Interface gr√°fica intuitiva
‚Ä¢ Sistema de commits com hash SHA-256
‚Ä¢ Sincroniza√ß√£o remota autom√°tica
‚Ä¢ Backup integrado
‚Ä¢ Multiplataforma

Desenvolvido por: Marcos Gomes
GitHub: @marcosgomes068

Licen√ßa: MIT
        """
        messagebox.showinfo("Sobre ChromaGit", about_text.strip())
    
    def show_docs(self):
        """Abre a documenta√ß√£o"""
        docs_path = project_dir / "docs"
        if docs_path.exists():
            try:
                if sys.platform == "win32":
                    os.startfile(str(docs_path))
                elif sys.platform == "darwin":
                    subprocess.run(["open", str(docs_path)])
                else:
                    subprocess.run(["xdg-open", str(docs_path)])
            except:
                messagebox.showinfo("Documenta√ß√£o", 
                                  f"Documenta√ß√£o dispon√≠vel em:\n{docs_path}")
        else:
            messagebox.showwarning("Aviso", "Documenta√ß√£o n√£o encontrada")

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Verificar se tkinter est√° dispon√≠vel
    try:
        import tkinter.simpledialog
    except ImportError:
        print("ERRO: tkinter n√£o est√° dispon√≠vel")
        print("No Ubuntu/Debian: sudo apt-get install python3-tk")
        print("No CentOS/RHEL: sudo yum install tkinter")
        sys.exit(1)
    
    # Criar e executar aplica√ß√£o
    root = tk.Tk()
    app = ChromaGitApp(root)
    
    # Configurar fechamento
    def on_closing():
        app.log_output("Fechando ChromaGit Desktop...")
        root.quit()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        on_closing()

if __name__ == "__main__":
    main()
