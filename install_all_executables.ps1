# ChromaGit - Instalador Completo de Executáveis
# Execute como Administrador: PowerShell -ExecutionPolicy Bypass -File install_all_executables.ps1

param(
    [switch]$User,
    [switch]$System,
    [switch]$Remove
)

# Cores para output
$Colors = @{
    Red = "Red"
    Green = "Green"
    Yellow = "Yellow"
    Blue = "Blue"
    Cyan = "Cyan"
    Magenta = "Magenta"
}

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Get-ChromaGitExecutables {
    param([string]$ChromaGitPath)
    
    $executables = @()
    $exeFiles = Get-ChildItem -Path $ChromaGitPath -Filter "*.exe" | Where-Object { $_.Name -ne "ChromaGit-Desktop.exe" }
    
    foreach ($exe in $exeFiles) {
        $baseName = [System.IO.Path]::GetFileNameWithoutExtension($exe.Name)
        $executables += @{
            Name = $baseName
            Path = $exe.FullName
            FileName = $exe.Name
        }
    }
    
    return $executables
}

function Create-AllLaunchers {
    param([string]$ChromaGitPath)
    
    Write-ColorOutput "📝 Criando scripts de lançamento para todos os executáveis..." $Colors.Blue
    
    $executables = Get-ChromaGitExecutables $ChromaGitPath
    $createdFiles = @()
    
    foreach ($exe in $executables) {
        $batchContent = "@echo off`r`n"
        $batchContent += "REM $($exe.Name) Launcher`r`n"
        $batchContent += "REM Auto-generated by install_all_executables.ps1`r`n`r`n"
        $batchContent += "if exist `"$($exe.Path)`" (`r`n"
        $batchContent += "    `"$($exe.Path)`" %*`r`n"
        $batchContent += ") else (`r`n"
        $batchContent += "    echo Erro: $($exe.FileName) nao encontrado`r`n"
        $batchContent += "    exit /b 1`r`n"
        $batchContent += ")`r`n"
        
        try {
            $batchPath = Join-Path $ChromaGitPath "$($exe.Name).bat"
            $batchContent | Out-File -FilePath $batchPath -Encoding ASCII -Force
            $createdFiles += $batchPath
            Write-ColorOutput "  ✅ $($exe.Name).bat criado" $Colors.Green
        }
        catch {
            Write-ColorOutput "  ❌ Erro ao criar $($exe.Name).bat: $($_.Exception.Message)" $Colors.Red
        }
    }
    
    # Criar launcher principal chromagit
    $mainBatchContent = "@echo off`r`n"
    $mainBatchContent += "REM ChromaGit Main Launcher`r`n"
    $mainBatchContent += "REM Auto-generated by install_all_executables.ps1`r`n`r`n"
    $mainBatchContent += "if exist `"$ChromaGitPath\ChromaGit.exe`" (`r`n"
    $mainBatchContent += "    `"$ChromaGitPath\ChromaGit.exe`" %*`r`n"
    $mainBatchContent += ") else (`r`n"
    $mainBatchContent += "    echo Erro: ChromaGit.exe nao encontrado`r`n"
    $mainBatchContent += "    exit /b 1`r`n"
    $mainBatchContent += ")`r`n"
    
    try {
        $mainBatchPath = Join-Path $ChromaGitPath "chromagit.bat"
        $mainBatchContent | Out-File -FilePath $mainBatchPath -Encoding ASCII -Force
        $createdFiles += $mainBatchPath
        Write-ColorOutput "  ✅ chromagit.bat criado" $Colors.Green
    }
    catch {
        Write-ColorOutput "  ❌ Erro ao criar chromagit.bat: $($_.Exception.Message)" $Colors.Red
    }
    
    return $createdFiles
}

function Add-ToUserPath {
    param([string]$ChromaGitPath)
    
    Write-ColorOutput "🔧 Adicionando ChromaGit ao PATH do usuário..." $Colors.Blue
    
    $userPath = [Environment]::GetEnvironmentVariable("PATH", "User")
    
    if ($userPath -like "*$ChromaGitPath*") {
        Write-ColorOutput "✅ ChromaGit já está no PATH do usuário" $Colors.Green
        return $true
    }
    
    try {
        $newPath = "$ChromaGitPath;$userPath"
        [Environment]::SetEnvironmentVariable("PATH", $newPath, "User")
        Write-ColorOutput "✅ ChromaGit adicionado ao PATH do usuário com sucesso!" $Colors.Green
        return $true
    }
    catch {
        Write-ColorOutput "❌ Erro ao adicionar ao PATH do usuário: $($_.Exception.Message)" $Colors.Red
        return $false
    }
}

function Add-ToSystemPath {
    param([string]$ChromaGitPath)
    
    if (-not (Test-Administrator)) {
        Write-ColorOutput "❌ Privilégios de administrador necessários para PATH do sistema" $Colors.Red
        Write-ColorOutput "💡 Execute como administrador ou use -User para PATH do usuário" $Colors.Yellow
        return $false
    }
    
    Write-ColorOutput "🔧 Adicionando ChromaGit ao PATH do sistema..." $Colors.Blue
    
    $systemPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
    
    if ($systemPath -like "*$ChromaGitPath*") {
        Write-ColorOutput "✅ ChromaGit já está no PATH do sistema" $Colors.Green
        return $true
    }
    
    try {
        $newPath = "$ChromaGitPath;$systemPath"
        [Environment]::SetEnvironmentVariable("PATH", $newPath, "Machine")
        Write-ColorOutput "✅ ChromaGit adicionado ao PATH do sistema com sucesso!" $Colors.Green
        return $true
    }
    catch {
        Write-ColorOutput "❌ Erro ao adicionar ao PATH do sistema: $($_.Exception.Message)" $Colors.Red
        return $false
    }
}

function Remove-FromPath {
    param([string]$ChromaGitPath)
    
    Write-ColorOutput "🗑️ Removendo ChromaGit do PATH..." $Colors.Yellow
    
    # Remover do PATH do usuário
    $userPath = [Environment]::GetEnvironmentVariable("PATH", "User")
    if ($userPath -like "*$ChromaGitPath*") {
        $newUserPath = $userPath -replace [regex]::Escape("$ChromaGitPath;"), ""
        $newUserPath = $newUserPath -replace [regex]::Escape(";$ChromaGitPath"), ""
        $newUserPath = $newUserPath -replace [regex]::Escape($ChromaGitPath), ""
        [Environment]::SetEnvironmentVariable("PATH", $newUserPath, "User")
        Write-ColorOutput "✅ Removido do PATH do usuário" $Colors.Green
    }
    
    # Remover do PATH do sistema (se for administrador)
    if (Test-Administrator) {
        $systemPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
        if ($systemPath -like "*$ChromaGitPath*") {
            $newSystemPath = $systemPath -replace [regex]::Escape("$ChromaGitPath;"), ""
            $newSystemPath = $newSystemPath -replace [regex]::Escape(";$ChromaGitPath"), ""
            $newSystemPath = $newSystemPath -replace [regex]::Escape($ChromaGitPath), ""
            [Environment]::SetEnvironmentVariable("PATH", $newSystemPath, "Machine")
            Write-ColorOutput "✅ Removido do PATH do sistema" $Colors.Green
        }
    }
    
    # Remover arquivos .bat criados
    $batFiles = Get-ChildItem -Path $ChromaGitPath -Filter "*.bat" | Where-Object { 
        $_.Name -match "(chromagit|add|commit|help|init|log|push)\.bat$" 
    }
    
    foreach ($batFile in $batFiles) {
        try {
            Remove-Item $batFile.FullName -Force
            Write-ColorOutput "✅ Removido: $($batFile.Name)" $Colors.Green
        }
        catch {
            Write-ColorOutput "❌ Erro ao remover $($batFile.Name): $($_.Exception.Message)" $Colors.Red
        }
    }
}

function Show-AvailableCommands {
    param([string]$ChromaGitPath)
    
    Write-ColorOutput "📋 Comandos disponíveis após instalação:" $Colors.Blue
    Write-Host ""
    
    $executables = Get-ChromaGitExecutables $ChromaGitPath
    
    # Comando principal
    Write-ColorOutput "🚀 Comando Principal:" $Colors.Cyan
    Write-ColorOutput "  chromagit                # Interface principal do ChromaGit" $Colors.White
    Write-ColorOutput "  chromagit --version      # Exibir versão" $Colors.White
    Write-ColorOutput "  chromagit --help         # Ajuda completa" $Colors.White
    Write-Host ""
    
    # Comandos individuais
    Write-ColorOutput "⚡ Comandos Diretos:" $Colors.Cyan
    foreach ($exe in $executables) {
        switch ($exe.Name) {
            "init" { 
                Write-ColorOutput "  init                     # Inicializar repositório" $Colors.White 
            }
            "add" { 
                Write-ColorOutput "  add                      # Adicionar arquivos" $Colors.White 
            }
            "commit" { 
                Write-ColorOutput "  commit                   # Fazer commit" $Colors.White 
            }
            "log" { 
                Write-ColorOutput "  log                      # Ver histórico" $Colors.White 
            }
            "push" { 
                Write-ColorOutput "  push                     # Sincronizar" $Colors.White 
            }
            "help" { 
                Write-ColorOutput "  help                     # Ajuda detalhada" $Colors.White 
            }
        }
    }
    
    Write-Host ""
    Write-ColorOutput "💡 Exemplos de uso:" $Colors.Yellow
    Write-ColorOutput "  chromagit init           # Iniciar novo repositório" $Colors.White
    Write-ColorOutput "  add .                    # Adicionar todos os arquivos" $Colors.White
    Write-ColorOutput "  commit -m 'Mensagem'     # Commit direto" $Colors.White
    Write-ColorOutput "  log --limit 10           # Ver últimos 10 commits" $Colors.White
    Write-ColorOutput "  push -b main             # Sincronizar branch main" $Colors.White
}

function Test-Installation {
    param([string]$ChromaGitPath)
    
    Write-ColorOutput "🔍 Testando instalação..." $Colors.Blue
    Write-Host ""
    
    $allWorking = $true
    
    # Testar comando principal
    $chromaGitBat = Join-Path $ChromaGitPath "chromagit.bat"
    if (Test-Path $chromaGitBat) {
        try {
            $result = & $chromaGitBat "--version" 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-ColorOutput "✅ chromagit funcionando: $result" $Colors.Green
            } else {
                Write-ColorOutput "❌ chromagit falhou" $Colors.Red
                $allWorking = $false
            }
        }
        catch {
            Write-ColorOutput "❌ Erro ao testar chromagit: $($_.Exception.Message)" $Colors.Red
            $allWorking = $false
        }
    } else {
        Write-ColorOutput "❌ chromagit.bat não encontrado" $Colors.Red
        $allWorking = $false
    }
    
    # Testar comandos individuais
    $executables = Get-ChromaGitExecutables $ChromaGitPath
    $workingCommands = 0
    
    foreach ($exe in $executables) {
        $batFile = Join-Path $ChromaGitPath "$($exe.Name).bat"
        if (Test-Path $batFile) {
            $workingCommands++
            Write-ColorOutput "✅ $($exe.Name) disponível" $Colors.Green
        } else {
            Write-ColorOutput "❌ $($exe.Name) não disponível" $Colors.Red
            $allWorking = $false
        }
    }
    
    Write-Host ""
    if ($allWorking) {
        Write-ColorOutput "🎉 Instalação completa! $($workingCommands + 1) comandos disponíveis" $Colors.Green
    } else {
        Write-ColorOutput "⚠️ Instalação parcial. Alguns comandos podem não funcionar" $Colors.Yellow
    }
    
    return $allWorking
}

function Main {
    Write-ColorOutput "╭─────────────────────────────────────────────╮" $Colors.Cyan
    Write-ColorOutput "│    ChromaGit - Instalador de Executáveis    │" $Colors.Cyan
    Write-ColorOutput "│      Adicionar TODOS os comandos ao PATH    │" $Colors.Cyan
    Write-ColorOutput "╰─────────────────────────────────────────────╯" $Colors.Cyan
    Write-Host ""
    
    # Determinar diretório do ChromaGit
    $scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
    $chromaGitDir = Join-Path $scriptDir "obj"
    
    if (-not (Test-Path $chromaGitDir)) {
        Write-ColorOutput "❌ Diretório obj/ não encontrado em: $chromaGitDir" $Colors.Red
        Write-ColorOutput "💡 Execute este script na pasta raiz do ChromaGit" $Colors.Yellow
        exit 1
    }
    
    Write-ColorOutput "📁 ChromaGit encontrado em: $chromaGitDir" $Colors.Green
    
    # Listar executáveis disponíveis
    $executables = Get-ChromaGitExecutables $chromaGitDir
    Write-ColorOutput "🔍 Executáveis encontrados: $($executables.Count)" $Colors.Blue
    foreach ($exe in $executables) {
        Write-ColorOutput "  📦 $($exe.FileName)" $Colors.White
    }
    Write-Host ""
    
    # Ações baseadas nos parâmetros
    if ($Remove) {
        Remove-FromPath $chromaGitDir
    }
    elseif ($System) {
        $launchers = Create-AllLaunchers $chromaGitDir
        $success = Add-ToSystemPath $chromaGitDir
        if ($success) {
            Write-ColorOutput "✅ $($launchers.Count) launchers criados" $Colors.Green
        }
    }
    elseif ($User) {
        $launchers = Create-AllLaunchers $chromaGitDir
        $success = Add-ToUserPath $chromaGitDir
        if ($success) {
            Write-ColorOutput "✅ $($launchers.Count) launchers criados" $Colors.Green
        }
    }
    else {
        # Perguntar ao usuário
        Write-ColorOutput "Escolha uma opção:" $Colors.Blue
        Write-ColorOutput "1. Instalar TODOS os executáveis no PATH do usuário (recomendado)" $Colors.White
        Write-ColorOutput "2. Instalar TODOS os executáveis no PATH do sistema (requer admin)" $Colors.White
        Write-ColorOutput "3. Remover todos os executáveis do PATH" $Colors.White
        Write-ColorOutput "4. Testar instalação existente" $Colors.White
        Write-ColorOutput "5. Cancelar" $Colors.White
        Write-Host ""
        
        $choice = Read-Host "Digite sua escolha (1-5)"
        
        switch ($choice) {
            "1" {
                $launchers = Create-AllLaunchers $chromaGitDir
                $success = Add-ToUserPath $chromaGitDir
                if ($success) {
                    Write-ColorOutput "✅ $($launchers.Count) launchers criados" $Colors.Green
                }
            }
            "2" {
                $launchers = Create-AllLaunchers $chromaGitDir
                $success = Add-ToSystemPath $chromaGitDir
                if ($success) {
                    Write-ColorOutput "✅ $($launchers.Count) launchers criados" $Colors.Green
                }
            }
            "3" {
                Remove-FromPath $chromaGitDir
            }
            "4" {
                Test-Installation $chromaGitDir
                exit 0
            }
            "5" {
                Write-ColorOutput "Operação cancelada" $Colors.Yellow
                exit 0
            }
            default {
                Write-ColorOutput "❌ Opção inválida" $Colors.Red
                exit 1
            }
        }
    }
    
    Write-Host ""
    Write-ColorOutput "🧪 Testando instalação..." $Colors.Blue
    $testResult = Test-Installation $chromaGitDir
    
    Write-Host ""
    Write-ColorOutput "╭─────────────────────────────────────────────╮" $Colors.Green
    Write-ColorOutput "│              Instalação Concluída!          │" $Colors.Green
    Write-ColorOutput "╰─────────────────────────────────────────────╯" $Colors.Green
    Write-Host ""
    
    Show-AvailableCommands $chromaGitDir
    
    Write-Host ""
    Write-ColorOutput "⚠️ IMPORTANTE: Reinicie o terminal para usar os comandos globalmente!" $Colors.Yellow
    Write-ColorOutput "📝 Para usar agora, execute: `$env:PATH = '$chromaGitDir;' + `$env:PATH" $Colors.Cyan
}

# Executar função principal
Main
