#!/bin/bash
# ChromaGit - Instalador para Linux/macOS
# Adiciona ChromaGit ao PATH do sistema

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis
ROCKET="🚀"
CHECK="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"
GEAR="⚙️"
TRASH="🗑️"

print_header() {
    echo -e "${CYAN}╭─────────────────────────────────────────────╮${NC}"
    echo -e "${CYAN}│         ChromaGit PATH Installer            │${NC}"
    echo -e "${CYAN}│      Adicionar/Remover do PATH Unix         │${NC}"
    echo -e "${CYAN}╰─────────────────────────────────────────────╯${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}${CHECK} $1${NC}"
}

print_error() {
    echo -e "${RED}${ERROR} $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}${WARNING} $1${NC}"
}

print_info() {
    echo -e "${BLUE}${INFO} $1${NC}"
}

# Detectar sistema operacional
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        SHELL_RC="$HOME/.bashrc"
        if [[ -f "$HOME/.zshrc" ]]; then
            SHELL_RC="$HOME/.zshrc"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        SHELL_RC="$HOME/.zshrc"
        if [[ -f "$HOME/.bash_profile" ]]; then
            SHELL_RC="$HOME/.bash_profile"
        fi
    else
        print_error "Sistema operacional não suportado: $OSTYPE"
        exit 1
    fi
}

# Verificar se ChromaGit está instalado
check_chromagit() {
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    CHROMAGIT_DIR="$SCRIPT_DIR"
    
    # Verificar se main.py existe
    if [[ ! -f "$CHROMAGIT_DIR/main.py" ]]; then
        print_error "main.py não encontrado em: $CHROMAGIT_DIR"
        print_info "Execute este script na pasta raiz do ChromaGit"
        exit 1
    fi
    
    print_success "ChromaGit encontrado em: $CHROMAGIT_DIR"
    return 0
}

# Criar script de lançamento
create_launcher() {
    local chromagit_dir="$1"
    local launcher_content
    
    print_info "${GEAR} Criando script de lançamento..."
    
    # Criar diretório ~/.local/bin se não existir
    mkdir -p "$HOME/.local/bin"
    
    launcher_content="#!/bin/bash
# ChromaGit Launcher Script
# Auto-generated by install_path.sh

CHROMAGIT_DIR=\"$chromagit_dir\"

# Verificar se Python está disponível
if ! command -v python3 &> /dev/null; then
    if ! command -v python &> /dev/null; then
        echo \"Erro: Python não encontrado\"
        echo \"Instale Python 3.7+ para usar ChromaGit\"
        exit 1
    fi
    PYTHON_CMD=\"python\"
else
    PYTHON_CMD=\"python3\"
fi

# Executar ChromaGit
if [[ -f \"\$CHROMAGIT_DIR/main.py\" ]]; then
    cd \"\$CHROMAGIT_DIR\"
    \$PYTHON_CMD main.py \"\$@\"
else
    echo \"Erro: ChromaGit não encontrado em \$CHROMAGIT_DIR\"
    exit 1
fi
"
    
    # Escrever o launcher
    echo "$launcher_content" > "$HOME/.local/bin/chromagit"
    chmod +x "$HOME/.local/bin/chromagit"
    
    print_success "Script chromagit criado em: $HOME/.local/bin/chromagit"
    return 0
}

# Adicionar ao PATH
add_to_path() {
    local path_line="export PATH=\"\$HOME/.local/bin:\$PATH\""
    
    print_info "${GEAR} Adicionando ~/.local/bin ao PATH..."
    
    # Verificar se já está no PATH
    if grep -q "\.local/bin" "$SHELL_RC" 2>/dev/null; then
        print_success "~/.local/bin já está no PATH"
        return 0
    fi
    
    # Adicionar ao arquivo de configuração do shell
    echo "" >> "$SHELL_RC"
    echo "# ChromaGit PATH - Adicionado automaticamente" >> "$SHELL_RC"
    echo "$path_line" >> "$SHELL_RC"
    
    print_success "~/.local/bin adicionado ao PATH em: $SHELL_RC"
    return 0
}

# Remover do PATH
remove_from_path() {
    print_info "${TRASH} Removendo ChromaGit do PATH..."
    
    # Remover launcher
    if [[ -f "$HOME/.local/bin/chromagit" ]]; then
        rm "$HOME/.local/bin/chromagit"
        print_success "Launcher removido: $HOME/.local/bin/chromagit"
    fi
    
    # Remover linhas do arquivo de configuração
    if [[ -f "$SHELL_RC" ]]; then
        # Criar backup
        cp "$SHELL_RC" "$SHELL_RC.backup"
        
        # Remover linhas relacionadas ao ChromaGit
        sed -i '/# ChromaGit PATH/d' "$SHELL_RC"
        sed -i '/\.local\/bin.*PATH/d' "$SHELL_RC"
        
        print_success "Entradas removidas de: $SHELL_RC"
        print_info "Backup criado em: $SHELL_RC.backup"
    fi
    
    return 0
}

# Verificar instalação
verify_installation() {
    print_info "${GEAR} Verificando instalação..."
    
    # Verificar se o launcher existe
    if [[ ! -f "$HOME/.local/bin/chromagit" ]]; then
        print_error "Launcher não encontrado"
        return 1
    fi
    
    # Verificar se ~/.local/bin está no PATH atual
    if [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
        print_success "~/.local/bin está no PATH atual"
    else
        print_warning "~/.local/bin não está no PATH atual"
        print_info "Execute: source $SHELL_RC"
    fi
    
    return 0
}

# Mostrar ajuda
show_help() {
    echo "Uso: $0 [OPÇÃO]"
    echo ""
    echo "Opções:"
    echo "  -i, --install    Instalar ChromaGit no PATH"
    echo "  -r, --remove     Remover ChromaGit do PATH"
    echo "  -h, --help       Mostrar esta ajuda"
    echo ""
    echo "Sem opções: modo interativo"
}

# Menu interativo
interactive_menu() {
    print_info "Escolha uma opção:"
    echo "1. Instalar ChromaGit no PATH"
    echo "2. Remover ChromaGit do PATH"
    echo "3. Verificar instalação"
    echo "4. Cancelar"
    echo ""
    
    read -p "Digite sua escolha (1-4): " choice
    
    case $choice in
        1)
            return 1  # Install
            ;;
        2)
            return 2  # Remove
            ;;
        3)
            return 3  # Verify
            ;;
        4)
            print_info "Operação cancelada"
            exit 0
            ;;
        *)
            print_error "Opção inválida"
            exit 1
            ;;
    esac
}

# Função principal
main() {
    print_header
    
    # Detectar sistema operacional
    detect_os
    print_info "Sistema detectado: $OS"
    print_info "Shell config: $SHELL_RC"
    echo ""
    
    # Verificar ChromaGit
    check_chromagit
    CHROMAGIT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    echo ""
    
    # Processar argumentos
    action=""
    case "${1:-}" in
        -i|--install)
            action="install"
            ;;
        -r|--remove)
            action="remove"
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        "")
            interactive_menu
            case $? in
                1) action="install" ;;
                2) action="remove" ;;
                3) action="verify" ;;
            esac
            ;;
        *)
            print_error "Opção inválida: $1"
            show_help
            exit 1
            ;;
    esac
    
    # Executar ação
    case $action in
        install)
            print_info "${ROCKET} Instalando ChromaGit..."
            create_launcher "$CHROMAGIT_DIR"
            add_to_path
            echo ""
            verify_installation
            ;;
        remove)
            remove_from_path
            ;;
        verify)
            verify_installation
            ;;
    esac
    
    echo ""
    print_header
    echo -e "${GREEN}              Concluído!                     ${NC}"
    echo -e "${CYAN}╰─────────────────────────────────────────────╯${NC}"
    echo ""
    
    if [[ "$action" == "install" ]]; then
        print_info "Como usar após reiniciar o terminal:"
        echo "  chromagit                # Modo interativo"
        echo "  chromagit init           # Inicializar repositório"
        echo "  chromagit add .          # Adicionar arquivos"
        echo "  chromagit commit -m 'msg' # Fazer commit"
        echo "  chromagit push           # Sincronizar"
        echo "  chromagit --help         # Ajuda"
        echo ""
        print_warning "Execute 'source $SHELL_RC' ou reinicie o terminal"
    fi
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
